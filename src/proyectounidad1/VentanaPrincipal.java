package proyectounidad1;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import com.formdev.flatlaf.*;
import com.formdev.flatlaf.intellijthemes.FlatCyanLightIJTheme;
import com.formdev.flatlaf.intellijthemes.FlatDarkPurpleIJTheme;
import com.formdev.flatlaf.intellijthemes.FlatGradiantoDeepOceanIJTheme;
import com.formdev.flatlaf.intellijthemes.FlatNordIJTheme;
import com.formdev.flatlaf.intellijthemes.FlatSolarizedDarkIJTheme;
import com.formdev.flatlaf.intellijthemes.FlatSolarizedLightIJTheme;
import java.awt.BorderLayout;
import java.awt.Desktop;
import java.awt.EventQueue;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.sql.*;
import java.util.ArrayList;
import java.util.Enumeration;
import javax.swing.ButtonModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.plaf.FontUIResource;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;
import static proyectounidad1.Login.con1;
/**
 *
 * @author samuel
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form VentanaPrincipal
     */
    
    
    private MouseListener mouseClickListener = null;
    private MouseListener mouseOrdenarTabla = null;
    public static Connection con = con1;
   
    
    public VentanaPrincipal() {
        initComponents();
        cerrarBaseDeDatos();
         URL imageLogoURL = getClass().getResource("/recursos/logo.png");
        ImageIcon logoIcon = new ImageIcon(imageLogoURL);
        setIconImage(logoIcon.getImage());
        FlatNordIJTheme.setup();
        FlatLaf.updateUI();
        
        cargarTablaBuscar();
        PanelBuscarPedido pb = new PanelBuscarPedido(this);
        panelAcciones.setLayout(new BorderLayout());
        panelAcciones.add(pb, BorderLayout.CENTER);
        panelAcciones.add(pb);
        panelAcciones.revalidate();
        panelAcciones.repaint();
        //Me salia un cuadrado azul al dejar el raton encima de una celda. Solucion:
        tablaBusqueda.setToolTipText(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    public void cerrarBaseDeDatos(){
        
        
        
        // Cerrar la conexión al cerrar la ventana
        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                try {
                    con.close();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        });
        
        
    }
    
    
    public void cargarTablaBuscar(){
        //Mostrar tabla empleados completa
        quitarListener();
        ResultSet resul = null;
        Statement stmt;
        
        String sql = "SELECT C.NOMCOMPANIA AS NombreCompaniaCliente, E.NOMBRE AS NombreEmpleado, P.FECHAPEDIDO AS FechaPedido,"
                + " CI.NOMBRE AS NombreCiudad, EE.NOMBRE AS NombreEmpresaEnvios  FROM PUBLIC.PEDIDOS P JOIN PUBLIC.CLIENTES C ON P.CODCLIENTE = C.CODIGO "
                + "JOIN PUBLIC.EMPLEADOS E ON P.CODEMPLEADO = E.CODIGO JOIN PUBLIC.CIUDADES CI ON P.CODCIUDAD = CI.CODIGO JOIN PUBLIC.COMPENVIOS EE ON P.CODEMPREENVIO = EE.CODIGO;";
        tablaBusqueda.setModel(new DefaultTableModel(
        new Object[][]{},
        new Object[]{
            
        }
        ));
        try {
            stmt = con.createStatement();
            resul = stmt.executeQuery(sql);
            
            //----------------------Configurar imagen para las columnas de detalles, eliminar y modificar ------------------------------
            //Estas lineas para las imagenes estan en varios metodos. Es lo mejor, porque si se hace en un metodo aparte, el programa tarda en cargar.
            
            
            URL imageEliminarURL = getClass().getResource("/recursos/eliminar.png");
            ImageIcon eliminarIcon = new ImageIcon(imageEliminarURL);
            //Ajustar tamaño de la imagen para la celda
            ImageIcon eliminarIconEscalado = new ImageIcon(eliminarIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));

            URL imageDetallesURL = getClass().getResource("/recursos/detalles.png");
            ImageIcon detallesIcon = new ImageIcon(imageDetallesURL);
            //Ajustar tamaño de la imagen para la celda
            ImageIcon detallesIconEscalado = new ImageIcon(detallesIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));

            URL imageModificarURL = getClass().getResource("/recursos/modificar.png");
            ImageIcon modificarIcon = new ImageIcon(imageModificarURL);
            //Ajustar tamaño de la imagen para la celda
            ImageIcon modificarIconEscalado = new ImageIcon(modificarIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));
            
            //--------------------------------------------------------------------------------------------------------------------------
            
            ResultSetMetaData metaData = resul.getMetaData();
            int columnCount = metaData.getColumnCount();
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Hace que todas las celdas no sean editables
                }
            
                @Override
                public Class<?> getColumnClass(int columnIndex) {
                    // Asegura que las 3 últimas columnas se traten como ImageIcon
                    int lastColumnIndex = getColumnCount() - 1;
                    int penultimateColumnIndex = getColumnCount() - 2;
                    int antepenultimaColumnIndex = getColumnCount() - 3;

                    if (columnIndex == penultimateColumnIndex || columnIndex == lastColumnIndex || columnIndex == antepenultimaColumnIndex) {
                        return ImageIcon.class;
                    }

                    return super.getColumnClass(columnIndex);
                }
            };
            model.setColumnIdentifiers(new Object[]{"Compañia Cliente", "Empleado", "Fecha Pedido", "Ciudad del pedido", "Empresa de envio", "Detalles", "Eliminar", "Modificar"});
            model.setColumnCount(columnCount+3);
            while (resul.next()) {
                Object[] rowData = new Object[columnCount +3];
                for (int i = 0; i < columnCount; i++) {
                    rowData[i] = resul.getObject(i + 1);
                }  
                //Añadir columnas de imagenes(detalles, eliminar, modificar) a la fila
                rowData[columnCount+2] = modificarIconEscalado;
                rowData[columnCount +1] = eliminarIconEscalado;
                rowData[columnCount] = detallesIconEscalado;
                model.addRow(rowData);
            }
            
                mouseListenerColumnasExtra();
            tablaBusqueda.setRowHeight(26);
            tablaBusqueda.setModel(model);
            activarOrdenarColumnas(model);
            
            TableColumnModel columnModel = tablaBusqueda.getColumnModel();
            columnModel.getColumn(columnCount).setPreferredWidth(6);
            columnModel.getColumn(columnCount+1).setPreferredWidth(5);
            columnModel.getColumn(columnCount+2).setPreferredWidth(5);
            columnModel.getColumn(2).setPreferredWidth(10);
            columnModel.getColumn(0).setPreferredWidth(150);
        } catch (SQLException ex) {
            ex.getMessage();
        } 
    }
    
    public void quitarListener(){
        tablaBusqueda.removeMouseListener(mouseClickListener);
        mouseClickListener = null;
    }
    
    public void activarOrdenarColumnas(DefaultTableModel model){
        tablaBusqueda.removeMouseListener(mouseOrdenarTabla);
        mouseOrdenarTabla = null;
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        tablaBusqueda.setRowSorter(sorter);
        mouseOrdenarTabla = new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                        int columnaSeleccionada = tablaBusqueda.columnAtPoint(evt.getPoint());
                    sorter.toggleSortOrder(columnaSeleccionada);
            }
        };
    }
    
    public void cargarTablaAnadir() {
        // Quito el listener que uso para darle a detalles, modificar y eliminar para que no interfiera con la tabla de añadir. 
        // Además de esta manera  soluciono el problema de que se acumulen los listeners cada vez que llamo al metodo mouseListenerColumnasExtra.
        tablaBusqueda.removeMouseListener(mouseClickListener);
        mouseClickListener = null;
        
        try {
            String consultaAnadir = "SELECT p.DIRECCION AS DireccionPedido, p.CODPOSTAL AS CodigoPostalPedido, p.CARGO AS CargoTotal, p.FECHAPEDIDO AS FechaPedido,"
                    + " p.FECHAENVIO AS FechaEnvio, p.FECHAENTREGA AS FechaEntrega, c.NOMBRE AS NombreCiudad, ce.NOMBRE AS NombreEmpresaEnvios, e.NOMBRE AS NombreEmpleado,"
                    + " cl.NOMCOMPANIA AS NombreCompaniaCliente "
                    + "FROM PUBLIC.PEDIDOS p JOIN PUBLIC.CIUDADES c ON p.CODCIUDAD = c.CODIGO"
                    + " JOIN PUBLIC.COMPENVIOS ce ON p.CODEMPREENVIO = ce.CODIGO "
                    + "JOIN PUBLIC.EMPLEADOS e ON p.CODEMPLEADO = e.CODIGO "
                    + "JOIN PUBLIC.CLIENTES cl ON p.CODCLIENTE = cl.CODIGO;";

            ResultSet resul = null;
            Statement stmt = null;

            stmt = con.createStatement();
            resul = stmt.executeQuery(consultaAnadir);

            ResultSetMetaData metaData = resul.getMetaData();
            int columnCount = metaData.getColumnCount();

            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Hace que todas las celdas no sean editables
                }
            };

            model.setColumnIdentifiers(new Object[]{"Direccion", "Codigo Postal", "Cargo (€)", "Fecha del pedido", "Fecha del envio", "Fecha de la entrega", "Ciudad", "Empresa de envios", "Empleado", "Compañia cliente"});

            while (resul.next()) {
                Object[] rowData = new Object[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    rowData[i - 1] = resul.getObject(i);
                }
                model.addRow(rowData);
            }

            tablaBusqueda.setModel(model);
            activarOrdenarColumnas(model);
            TableColumnModel columnModel = tablaBusqueda.getColumnModel();
            columnModel.getColumn(0).setPreferredWidth(100);
            columnModel.getColumn(1).setPreferredWidth(60);
            columnModel.getColumn(2).setPreferredWidth(30);
            columnModel.getColumn(8).setPreferredWidth(60);
            columnModel.getColumn(9).setPreferredWidth(130);

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    
    
    
    public void mouseListenerColumnasExtra(){
      
        mouseClickListener= new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
               Statement stmt = null;
                try {
                    stmt = con.createStatement();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
               ResultSet resul = null;


                String sql = "SELECT C.NOMCOMPANIA AS NombreCompaniaCliente, E.NOMBRE AS NombreEmpleado, P.FECHAPEDIDO AS FechaPedido,"
                       + " CI.NOMBRE AS NombreCiudad, EE.NOMBRE AS NombreEmpresaEnvios  FROM PUBLIC.PEDIDOS P JOIN PUBLIC.CLIENTES C ON P.CODCLIENTE = C.CODIGO "
                       + "JOIN PUBLIC.EMPLEADOS E ON P.CODEMPLEADO = E.CODIGO JOIN PUBLIC.CIUDADES CI ON P.CODCIUDAD = CI.CODIGO JOIN PUBLIC.COMPENVIOS EE ON P.CODEMPREENVIO = EE.CODIGO;";
                
                //----------------------Configurar imagen para las columnas de detalles, eliminar y modificar ------------------------------
                
                URL imageEliminarURL = getClass().getResource("/recursos/eliminar.png");
                ImageIcon eliminarIcon = new ImageIcon(imageEliminarURL);
                //Ajustar tamaño de la imagen para la celda
                ImageIcon eliminarIconEscalado = new ImageIcon(eliminarIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));

                URL imageDetallesURL = getClass().getResource("/recursos/detalles.png");
                ImageIcon detallesIcon = new ImageIcon(imageDetallesURL);
                //Ajustar tamaño de la imagen para la celda
                ImageIcon detallesIconEscalado = new ImageIcon(detallesIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));

                URL imageModificarURL = getClass().getResource("/recursos/modificar.png");
                ImageIcon modificarIcon = new ImageIcon(imageModificarURL);
                //Ajustar tamaño de la imagen para la celda
                ImageIcon modificarIconEscalado = new ImageIcon(modificarIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));
                
                //-------------------------------------------------------------------------------------------------------------------------
                
                
                // Obtener el índice de la columna en la que se hizo clic
                int column = tablaBusqueda.columnAtPoint(evt.getPoint());

                // Obtener el índice de la fila en la que se hizo clic
                int row = tablaBusqueda.rowAtPoint(evt.getPoint());
                
                // Obtener el índice de la columna de modificar (última columna), eliminar (penúltima columna), detalles (antepenúltima columna)
                int modificarColumna = tablaBusqueda.getColumnCount()-1;  
                int eliminarColumna = tablaBusqueda.getColumnCount() - 2; 
                int detallesColumna = tablaBusqueda.getColumnCount() - 3;
                
                    String codigoPedidoSeleccionado = "SELECT codigo FROM pedidos WHERE fechapedido = '" +  tablaBusqueda.getValueAt(row, 2) + "' "
                            + "AND CODCLIENTE = (SELECT codigo from clientes WHERE NOMCOMPANIA = '" + tablaBusqueda.getValueAt(row, 0) + "')";
                int codigoPedido = 0;
                try {
                    resul = stmt.executeQuery(codigoPedidoSeleccionado);
                    if(resul.next()){
                        codigoPedido = resul.getInt("codigo");
                    }
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }
                if (row < tablaBusqueda.getRowCount() && row >= 0 && column == detallesColumna) {
                        VentanaDetallesPedido vd = new VentanaDetallesPedido(VentanaPrincipal.this,true,codigoPedido, VentanaPrincipal.this);
                        vd.setVisible(true);
                }
                if (row < tablaBusqueda.getRowCount() && row >= 0 && column == eliminarColumna) {
                    int opcion = JOptionPane.showConfirmDialog(null, "¿Estás seguro de que quieres eliminar este pedido?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

                    if (opcion == JOptionPane.YES_OPTION) {
                        try {
                            String eliminarPedido = "DELETE FROM pedidos WHERE codigo = '" + codigoPedido + "'";
                            int filasAfectadas = stmt.executeUpdate(eliminarPedido);

                            if (filasAfectadas > 0) {
                                JOptionPane.showMessageDialog(null, "Pedido eliminado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                            } else {
                                JOptionPane.showMessageDialog(null, "No se pudo eliminar el pedido", "Error", JOptionPane.ERROR_MESSAGE);
                            }

                            // Luego, ejecutas la consulta para actualizar la tabla
                            ResultSet rs = stmt.executeQuery(sql);
                            DefaultTableModel model = (DefaultTableModel) tablaBusqueda.getModel();
                            model.setRowCount(0);

                            while (rs.next()) {
                                Object[] rowData = {rs.getString("NombreCompaniaCliente"), rs.getString("NombreEmpleado"), rs.getDate("FechaPedido"),
                                        rs.getString("NombreCiudad"), rs.getString("NombreEmpresaEnvios"), detallesIconEscalado, eliminarIconEscalado, modificarIconEscalado};
                                model.addRow(rowData);
                            }

                            rs.close();
                            stmt.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                }

                if (row < tablaBusqueda.getRowCount() && row >= 0 && column == modificarColumna) {
                        VentanaModificarPedido vm = new VentanaModificarPedido(VentanaPrincipal.this,true, VentanaPrincipal.this);
                        vm.rellenarDatos(codigoPedido);
                        vm.setVisible(true);
                }
            }
        };
        
        //Activar el listener en la jTable
        tablaBusqueda.addMouseListener(mouseClickListener);
    }
    
    
    
    
    public void buscarPedido(javax.swing.JComboBox<String> empresaDeEnvio, javax.swing.JComboBox<String> ciudadDelPedido,
        javax.swing.JTextField fechaPedido, javax.swing.JTextField nombreCompania, javax.swing.JList<String> listaEmpleado) {
        
        /*
        Explicación de los parámetros en el método:
        De esta manera puedes llamar al metodo buscarPedido desde otras clases. Por ejemplo, desde el arhivo PanelBuscarPedido que es un jPanel , 
        cuando le des al botón de "Buscar" llamará a este método, que tendra en sus parámetros los campos de esa clase.
        */
        
        String comboEmpresaEnvio = (String) empresaDeEnvio.getSelectedItem();
        String comboCiudadPedido = (String) ciudadDelPedido.getSelectedItem();
        String fieldFechaPedido = fechaPedido.getText().trim();
        String fieldNombreCompania = nombreCompania.getText().trim();
        String listEmpleado = listaEmpleado.getSelectedValue();
        
        String sql = "SELECT C.NOMCOMPANIA AS NombreCompaniaCliente, E.NOMBRE AS NombreEmpleado, P.FECHAPEDIDO AS FechaPedido,"
                    + " CI.NOMBRE AS NombreCiudad, EE.NOMBRE AS NombreEmpresaEnvios FROM PUBLIC.PEDIDOS P JOIN PUBLIC.CLIENTES C ON P.CODCLIENTE = C.CODIGO "
                    + "JOIN PUBLIC.EMPLEADOS E ON P.CODEMPLEADO = E.CODIGO JOIN PUBLIC.CIUDADES CI ON P.CODCIUDAD = CI.CODIGO JOIN PUBLIC.COMPENVIOS EE ON P.CODEMPREENVIO = EE.CODIGO WHERE 1 = 1";

        // Verificar si los campos están vacios
        if (!fieldFechaPedido.isEmpty()) {
            sql += " AND P.FECHAPEDIDO LIKE '%" + fieldFechaPedido + "%' ";
        }

        if (!fieldNombreCompania.isEmpty()) {
            sql += " AND LOWER(C.NOMCOMPANIA) LIKE '%" + fieldNombreCompania.toLowerCase() + "%' ";
        }

        if (!"Elige una opción".equals(comboEmpresaEnvio)) {
            sql += " AND LOWER(EE.NOMBRE) = '" + comboEmpresaEnvio.toLowerCase() + "' ";
        }

        if (!"Elige una opción".equals(comboCiudadPedido)) {
            sql += " AND LOWER(CI.NOMBRE) = '" + comboCiudadPedido.toLowerCase() + "' ";
        }
        if (listEmpleado != null) {
            sql += " AND LOWER(E.NOMBRE) = '" + listEmpleado.toLowerCase() + "' ";
        }


        // Ejecuta la consulta y actualiza la tabla
        try {
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(sql);

            DefaultTableModel model = (DefaultTableModel) tablaBusqueda.getModel();
           
                
            //--------------------------------------------------------------------------------------------------------------------------
            if (!rs.isBeforeFirst()) {
                // No hay resultados, muestra un JOptionPane y retorna
                JOptionPane.showMessageDialog(null, "No hay resultados para tu búsqueda", "Sin resultados", JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                 model.setRowCount(0);
            
                //----------------------Configurar imagen para las columnas de detalles, eliminar y modificar ------------------------------

                URL imageEliminarURL = getClass().getResource("/recursos/eliminar.png");
                ImageIcon eliminarIcon = new ImageIcon(imageEliminarURL);
                //Ajustar tamaño de la imagen para la celda
                ImageIcon eliminarIconEscalado = new ImageIcon(eliminarIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));

                URL imageDetallesURL = getClass().getResource("/recursos/detalles.png");
                ImageIcon detallesIcon = new ImageIcon(imageDetallesURL);
                //Ajustar tamaño de la imagen para la celda
                ImageIcon detallesIconEscalado = new ImageIcon(detallesIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));

                URL imageModificarURL = getClass().getResource("/recursos/modificar.png");
                ImageIcon modificarIcon = new ImageIcon(imageModificarURL);
                //Ajustar tamaño de la imagen para la celda
                ImageIcon modificarIconEscalado = new ImageIcon(modificarIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));
                while (rs.next()) {
                Object[] row = { rs.getString("NombreCompaniaCliente"), rs.getString("NombreEmpleado"), rs.getDate("FechaPedido"),
                        rs.getString("NombreCiudad"), rs.getString("NombreEmpresaEnvios"), detallesIconEscalado, eliminarIconEscalado, modificarIconEscalado};
                model.addRow(row);
                
                }
            }
            rs.close();
            stmt.close();
            
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    
    
    

    public  void rellenarSeleccionesBuscar(javax.swing.JComboBox<String> empresasEnvios, javax.swing.JComboBox<String> ciudadesPedidos, javax.swing.JList<String> empleadoList){
        
        ArrayList<String> listaEmpresasEnvios = new ArrayList<>();
        ArrayList<String> listaCiudadesPedidos = new ArrayList<>();

        //Rellenar nombres de empresas de envios

        String queryListaEmpresasEnvios = "SELECT nombre FROM CompEnvios";
            try (Statement stmt2 = con.createStatement();
                   ResultSet resultSet = stmt2.executeQuery(queryListaEmpresasEnvios)) {
                listaEmpresasEnvios.add("Elige una opción");
                while (resultSet.next()) {
                   listaEmpresasEnvios.add(resultSet.getString("nombre"));
                }

                DefaultComboBoxModel<String> modeloComboEmpresasEnvios = new DefaultComboBoxModel<>(listaEmpresasEnvios.toArray(new String[0]));

                empresasEnvios.setModel(modeloComboEmpresasEnvios);

            } catch (SQLException ex) {
                ex.printStackTrace();
            }

            //Rellenar combobox de ciudades de los pedidos

            String queryListaCiudadesPedidos = "SELECT nombre FROM Ciudades";
            try (Statement stmt2 = con.createStatement();
                ResultSet resultSet = stmt2.executeQuery(queryListaCiudadesPedidos)) {
                listaCiudadesPedidos.add("Elige una opción");
                while (resultSet.next()) {
                   listaCiudadesPedidos.add(resultSet.getString("nombre"));
                }
                
                //Añadimos el ArrayList<String> al comboBox
                DefaultComboBoxModel<String> modeloComboCiudadesPedidos = new DefaultComboBoxModel<>(listaCiudadesPedidos.toArray(new String[0]));
                ciudadesPedidos.setModel(modeloComboCiudadesPedidos);

            } catch (SQLException ex) {
               ex.printStackTrace();
            }

            // Rellenar el JList de empleados

            String queryListaEmpleados = "SELECT nombre FROM Empleados";
            try (Statement stmt3 = con.createStatement();
                 ResultSet resultSet = stmt3.executeQuery(queryListaEmpleados)) {

                DefaultListModel<String> modeloListaEmpleados = new DefaultListModel<>();

                while (resultSet.next()) {
                    modeloListaEmpleados.addElement(resultSet.getString("nombre"));
                }

                empleadoList.setModel(modeloListaEmpleados);

            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }   

    
   
    
    
    public void rellenarListasVentanasAnadirModificar(javax.swing.JComboBox<String> comboCiudades, javax.swing.JList<String> listPaises, javax.swing.JList<String> listEmpleados){
        
        
        //Si no hay nada seleccionado, en el comboBox de ciudades aparecerá "Selecciona un país"
        DefaultComboBoxModel<String> modeloComboCiudades = new DefaultComboBoxModel<>();
        modeloComboCiudades.addElement("Selecciona un país");
        comboCiudades.setModel(modeloComboCiudades);
        
        //Cuando se pulse algún valor del JList de países, se rellenará el comboBox de ciudades
        // Añade un mouse listener al JList de países
        listPaises.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 1) {
                    // Obtiene el país seleccionado del JList de países
                    String paisSeleccionado = listPaises.getSelectedValue();
                    if (paisSeleccionado != null) {
                        cargarCiudadesPorPais(paisSeleccionado, comboCiudades);
                    }
                }
            }
        });
            
        //Rellenar jList de Paises
            
        String consultaListaPaises = "SELECT nombre  FROM paises";
        try (Statement stmt2 = con.createStatement();
                ResultSet resultSet = stmt2.executeQuery(consultaListaPaises)) {
            DefaultListModel<String> modeloListaPaises = new DefaultListModel<>();

            while (resultSet.next()) {
                modeloListaPaises.addElement(resultSet.getString("nombre"));
            }

            listPaises.setModel(modeloListaPaises);

        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        //Rellenar jList de Empleados

        String queryListaEmpleados = "SELECT nombre FROM Empleados";
        try (Statement stmt3 = con.createStatement();
             ResultSet resultSet = stmt3.executeQuery(queryListaEmpleados)) {

            DefaultListModel<String> modeloListaEmpleados = new DefaultListModel<>();

            while (resultSet.next()) {
                modeloListaEmpleados.addElement(resultSet.getString("nombre"));
            }

            listEmpleados.setModel(modeloListaEmpleados);

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    
    
    
    public void cargarCiudadesPorPais(String pais, JComboBox<String> comboCiudades) {
        
        // El código del país sirve para realizar la consulta en la base de datos
        String codigoPais = obtenerCodigoPais(pais);

        // Realiza la consulta para obtener las ciudades del país
        String consultaListaCiudades = "SELECT nombre FROM ciudades WHERE codPais = " + codigoPais + ";";
        
        try (Statement stmt2 = con.createStatement(); ResultSet resultSet = stmt2.executeQuery(consultaListaCiudades)) {
            DefaultComboBoxModel<String> modeloComboCiudadesPedidos = new DefaultComboBoxModel<>();
             while (resultSet.next()) {
                modeloComboCiudadesPedidos.addElement(resultSet.getString("nombre"));
            }

            if (modeloComboCiudadesPedidos.getSize() == 0) {
                // Si no hay ciudades, añade un elemento indicando que no hay ciudades cargadas
                modeloComboCiudadesPedidos.addElement("Este país no tiene ciudades");
            }

            comboCiudades.setModel(modeloComboCiudadesPedidos);

        } catch (SQLException ex) {
            ex.printStackTrace();
            System.out.println("Error al cargar ciudades por país");
        }
    }

     
    //Con este método saco el codigo del país mediante el nombre del país que me pasan por parámetro
    
    private String obtenerCodigoPais(String nombrePais) {
       
        String codigoPais = "";
        try {
            String consultaCodigoPais = "SELECT codigo FROM paises WHERE nombre = ?";
            try (PreparedStatement pstmt = con.prepareStatement(consultaCodigoPais)) {
                pstmt.setString(1, nombrePais);
                ResultSet resultSet = pstmt.executeQuery();

                if (resultSet.next()) {
                   codigoPais = resultSet.getString("codigo");
                }
           }
        } catch (SQLException ex) {
           ex.printStackTrace();
           System.out.println("Error al obtener el código del país");
        }

        return codigoPais;
    }
    
    
    
    
    
    
    /*
    -------------------------------------------------------------------------------------------------------------------------------
    
    
                SECCIÓN CLIENTES 
    
    
    -------------------------------------------------------------------------------------------------------------------------------
    */
    
    
    
    
    public void cargarTablaBuscarClientes(){
        
        tablaBusqueda.removeMouseListener(mouseClickListener);
        mouseClickListener = null;
        ResultSet resul = null;
        Statement stmt;
        
         String sql = "SELECT C.NOMCOMPANIA AS NombreCompaniaCliente, " +
                 "C.NOMCONTACTO AS NombreContacto, " +
                 "C.CODIGOPOSTAL AS CodigoPostal, " +
                 "G.NOMBRE AS Cargo, " +
                 "CI.NOMBRE AS Ciudad " +
                 "FROM PUBLIC.CLIENTES C " +
                 "LEFT JOIN PUBLIC.CARGOS G ON C.CODCARGO = G.CODIGO " +
                 "LEFT JOIN PUBLIC.CIUDADES CI ON C.CODCIUDAD = CI.CODIGO";
         
        tablaBusqueda.setModel(new DefaultTableModel(
        new Object[][]{},
        new Object[]{
            
        }
        ));
        try {
            stmt = con.createStatement();
            resul = stmt.executeQuery(sql);
            
            //----------------------Configurar imagen para las columnas de detalles, eliminar y modificar ------------------------------
            //Estas lineas para las imagenes estan en varios metodos. Es lo mejor, porque si se hace en un metodo aparte, el programa tarda en cargar.
            
            
            URL imageEliminarURL = getClass().getResource("/recursos/eliminar.png");
            ImageIcon eliminarIcon = new ImageIcon(imageEliminarURL);
            //Ajustar tamaño de la imagen para la celda
            ImageIcon eliminarIconEscalado = new ImageIcon(eliminarIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));

            URL imageDetallesURL = getClass().getResource("/recursos/detalles.png");
            ImageIcon detallesIcon = new ImageIcon(imageDetallesURL);
            //Ajustar tamaño de la imagen para la celda
            ImageIcon detallesIconEscalado = new ImageIcon(detallesIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));

            URL imageModificarURL = getClass().getResource("/recursos/modificar.png");
            ImageIcon modificarIcon = new ImageIcon(imageModificarURL);
            //Ajustar tamaño de la imagen para la celda
            ImageIcon modificarIconEscalado = new ImageIcon(modificarIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));
            
            //--------------------------------------------------------------------------------------------------------------------------
            
            ResultSetMetaData metaData = resul.getMetaData();
            int columnCount = metaData.getColumnCount();
            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Hace que todas las celdas no sean editables
                }
            
                @Override
                public Class<?> getColumnClass(int columnIndex) {
                    // Asegura que las 3 últimas columnas se traten como ImageIcon
                    int lastColumnIndex = getColumnCount() - 1;
                    int penultimateColumnIndex = getColumnCount() - 2;
                    int antepenultimaColumnIndex = getColumnCount() - 3;

                    if (columnIndex == penultimateColumnIndex || columnIndex == lastColumnIndex || columnIndex == antepenultimaColumnIndex) {
                        return ImageIcon.class;
                    }

                    return super.getColumnClass(columnIndex);
                }
            };
            model.setColumnIdentifiers(new Object[]{"Compañia Cliente", "Nombre Contacto", "Codigo Postal", "Cargo", "Ciudad", "Detalles", "Eliminar", "Modificar"});
            model.setColumnCount(columnCount+3);
            while (resul.next()) {
                Object[] rowData = new Object[columnCount +3];
                for (int i = 0; i < columnCount; i++) {
                    rowData[i] = resul.getObject(i + 1);
                }  
                //Añadir columnas de imagenes(detalles, eliminar, modificar) a la fila
                rowData[columnCount+2] = modificarIconEscalado;
                rowData[columnCount +1] = eliminarIconEscalado;
                rowData[columnCount] = detallesIconEscalado;
                model.addRow(rowData);
            }
            
            mouseListenerColumnasExtraCliente();
            tablaBusqueda.setRowHeight(26);
            tablaBusqueda.setModel(model);
            activarOrdenarColumnas(model);
            TableColumnModel columnModel = tablaBusqueda.getColumnModel();
            
            //Configurar ancho de columnas
            columnModel.getColumn(columnCount).setPreferredWidth(5);
            columnModel.getColumn(columnCount+1).setPreferredWidth(5);
            columnModel.getColumn(columnCount+2).setPreferredWidth(5);
            columnModel.getColumn(0).setPreferredWidth(150);
            columnModel.getColumn(2).setPreferredWidth(30);
            columnModel.getColumn(3).setPreferredWidth(150);
        } catch (SQLException ex) {
            ex.getMessage();
        } 
    }
    
    
    public void rellenarSeleccionesBuscarCliente(javax.swing.JComboBox<String> comboPaises, javax.swing.JList<String> listCiudades){
        
        DefaultListModel<String> modeloListaCiudades = new DefaultListModel<>();
        modeloListaCiudades.addElement("Selecciona un país");
        listCiudades.setModel(modeloListaCiudades);
        
        comboPaises.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            // Obtiene el país seleccionado del JComboBox de países
            String paisSeleccionado = comboPaises.getSelectedItem().toString();
            if (!"Elige una ocpión".equals(paisSeleccionado)) {
                cargarCiudadesPorPais(paisSeleccionado, listCiudades);
            }
        }
        });
        
        String consultaListaPaises = "SELECT nombre FROM paises";
        try (Statement stmt2 = con.createStatement(); ResultSet resultSet = stmt2.executeQuery(consultaListaPaises)) {
            DefaultComboBoxModel<String> modeloComboPaises = new DefaultComboBoxModel<>();
            modeloComboPaises.addElement("Elige una opción");
            while (resultSet.next()) {
                modeloComboPaises.addElement(resultSet.getString("nombre"));
            }

            comboPaises.setModel(modeloComboPaises);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }   
        
    }   
    
    private void cargarCiudadesPorPais(String pais, javax.swing.JList<String> listCiudades) {
        String codigoPais = obtenerCodigoPais(pais);
        if(codigoPais.equals("") || codigoPais == null){
            DefaultListModel<String> modeloListaCiudades = new DefaultListModel<>();
            modeloListaCiudades.addElement("Selecciona un país");
            listCiudades.setModel(modeloListaCiudades);
        }
        else{
             // Realiza la consulta para obtener las ciudades del país
             String consultaListaCiudades = "SELECT nombre FROM ciudades WHERE codPais = " + codigoPais + ";";

            try (Statement stmt2 = con.createStatement(); ResultSet resultSet = stmt2.executeQuery(consultaListaCiudades)) {
                DefaultListModel<String> modeloListaCiudades = new DefaultListModel<>();
                if (!resultSet.next()) {
                    // Si no hay ciudades, añade un elemento indicando que no hay ciudades cargadas
                    modeloListaCiudades.addElement("Este país no tiene ciudades");
                } else {
                    // Agrega las ciudades al modelo del JList
                    do {
                        modeloListaCiudades.addElement(resultSet.getString("nombre"));
                    } while (resultSet.next());
                }

                listCiudades.setModel(modeloListaCiudades);

            } catch (SQLException ex) {
                ex.printStackTrace();
                System.out.println("Error al cargar ciudades por país");
            }
        }
       
    }
    
    
    
    
    
    public void mouseListenerColumnasExtraCliente(){
        tablaBusqueda.removeMouseListener(mouseClickListener);
        mouseClickListener = null;
        mouseClickListener= new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
               Statement stmt = null;
                try {
                    stmt = con.createStatement();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
               ResultSet resul = null;


               String sql = "SELECT C.NOMCOMPANIA AS NombreCompaniaCliente, " +
                 "C.NOMCONTACTO AS NombreContacto, " +
                 "C.CODIGOPOSTAL AS CodigoPostal, " +
                 "G.NOMBRE AS Cargo, " +
                 "CI.NOMBRE AS Ciudad " +
                 "FROM PUBLIC.CLIENTES C " +
                 "LEFT JOIN PUBLIC.CARGOS G ON C.CODCARGO = G.CODIGO " +
                 "LEFT JOIN PUBLIC.CIUDADES CI ON C.CODCIUDAD = CI.CODIGO";
                
                //----------------------Configurar imagen para las columnas de detalles, eliminar y modificar ------------------------------
                
                URL imageEliminarURL = getClass().getResource("/recursos/eliminar.png");
                ImageIcon eliminarIcon = new ImageIcon(imageEliminarURL);
                //Ajustar tamaño de la imagen para la celda
                ImageIcon eliminarIconEscalado = new ImageIcon(eliminarIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));

                URL imageDetallesURL = getClass().getResource("/recursos/detalles.png");
                ImageIcon detallesIcon = new ImageIcon(imageDetallesURL);
                //Ajustar tamaño de la imagen para la celda
                ImageIcon detallesIconEscalado = new ImageIcon(detallesIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));

                URL imageModificarURL = getClass().getResource("/recursos/modificar.png");
                ImageIcon modificarIcon = new ImageIcon(imageModificarURL);
                //Ajustar tamaño de la imagen para la celda
                ImageIcon modificarIconEscalado = new ImageIcon(modificarIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));
                
                //-------------------------------------------------------------------------------------------------------------------------
                
                
                // Obtener el índice de la columna en la que se hizo clic
                int column = tablaBusqueda.columnAtPoint(evt.getPoint());

                // Obtener el índice de la fila en la que se hizo clic
                int row = tablaBusqueda.rowAtPoint(evt.getPoint());
                
                // Obtener el índice de la columna de modificar (última columna), eliminar (penúltima columna), detalles (antepenúltima columna)
                int modificarColumna = tablaBusqueda.getColumnCount()-1;  
                int eliminarColumna = tablaBusqueda.getColumnCount() - 2; 
                int detallesColumna = tablaBusqueda.getColumnCount() - 3;
                
                    String codigoClienteSeleccionado = "SELECT CODIGO FROM CLIENTES WHERE NOMCOMPANIA = '" + tablaBusqueda.getValueAt(row, 0)+"'";
                int codigoCliente = 0;
                try {
                    resul = stmt.executeQuery(codigoClienteSeleccionado);
                    if(resul.next()){
                        codigoCliente = resul.getInt("codigo");
                    }
                    } catch (SQLException ex) {
                        ex.printStackTrace();
                    }
                if (row < tablaBusqueda.getRowCount() && row >= 0 && column == detallesColumna) {
                        VentanaDetallesCliente vd = new VentanaDetallesCliente(VentanaPrincipal.this,true,codigoCliente, VentanaPrincipal.this);
                        vd.setVisible(true);
                }
                
                if (row < tablaBusqueda.getRowCount() && row >= 0 && column == eliminarColumna) {
                int opcion = JOptionPane.showConfirmDialog(null, "¿Estás seguro de que quieres eliminar este cliente?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);

                if (opcion == JOptionPane.YES_OPTION) {
                    try {
                        String eliminarEmpleado = "DELETE FROM clientes WHERE codigo = '" + codigoCliente + "'";
                        int filasAfectadas = stmt.executeUpdate(eliminarEmpleado);

                        if (filasAfectadas > 0) {
                            JOptionPane.showMessageDialog(null, "Cliente eliminado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
                        } else {
                            JOptionPane.showMessageDialog(null, "No se pudo eliminar el cliente", "Error", JOptionPane.ERROR_MESSAGE);
                        }

                        // Luego, ejecutas la consulta para actualizar la tabla
                        ResultSet rs = stmt.executeQuery(sql);
                        DefaultTableModel model = (DefaultTableModel) tablaBusqueda.getModel();
                        model.setRowCount(0);

                        while (rs.next()) {
                            Object[] rowData = {rs.getString("NombreCompaniaCliente"), rs.getString("NombreContacto"), rs.getString("CodigoPostal"),
                                    rs.getString("Cargo"), rs.getString("Ciudad"), detallesIconEscalado, eliminarIconEscalado, modificarIconEscalado};
                            model.addRow(rowData);
                        }

                        rs.close();
                        stmt.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
                
                if (row < tablaBusqueda.getRowCount() && row >= 0 && column == modificarColumna) {
                        VentanaModificarCliente vm = new VentanaModificarCliente(VentanaPrincipal.this,true, VentanaPrincipal.this);
                        vm.rellenarDatos(codigoCliente);
                        vm.setVisible(true);
                }
            }
        };
        
        //Activar el listener en la jTable
        tablaBusqueda.addMouseListener(mouseClickListener);
    }
    
    
    
    
    public void buscarCliente(javax.swing.JTextField codigoPostal, javax.swing.JTextField nombreCompania,
        javax.swing.JTextField nombreContacto, javax.swing.ButtonGroup buttonGroup1, javax.swing.JList<String> listaCiudades) {
        
        /*
        Explicación de los parámetros en el método:
        De esta manera puedes llamar al metodo buscarCliente desde otras clases. Por ejemplo, desde el arhivo PanelBuscarPedido que es un jPanel , 
        cuando le des al botón de "Buscar" llamará a este método, que tendra en sus parámetros los campos de esa clase.
        */
        ButtonModel selectedButtonModel = buttonGroup1.getSelection();
        String cargoSeleccionado;
        if (selectedButtonModel != null) {
            cargoSeleccionado = selectedButtonModel.getActionCommand();
        } else {
            // Manejo si no se ha seleccionado ningún botón.
            cargoSeleccionado = null;
        }
        
        String fieldNomContacto = nombreContacto.getText().trim();
        String fieldNombreCompania = nombreCompania.getText().trim();
        String fieldCodigoPostal = codigoPostal.getText().trim();
        String listCiudades = listaCiudades.getSelectedValue();
        
        String sql = "SELECT C.NOMCOMPANIA AS NombreCompaniaCliente, C.NOMCONTACTO AS NombreContacto, C.CODIGOPOSTAL AS CodigoPostal, G.NOMBRE AS Cargo, CI.NOMBRE AS Ciudad "
                + "FROM PUBLIC.CLIENTES C LEFT JOIN PUBLIC.CARGOS G ON C.CODCARGO = G.CODIGO LEFT JOIN PUBLIC.CIUDADES CI ON C.CODCIUDAD = CI.CODIGO WHERE 1=1 ";

        // Verificar si los campos están vacios
        if (!fieldNomContacto.isEmpty()) {
            sql += " AND LOWER(C.NOMCONTACTO) LIKE '%" + fieldNomContacto.toLowerCase() + "%' ";
        }

        if (!fieldNombreCompania.isEmpty()) {
            sql += " AND LOWER(C.NOMCOMPANIA) LIKE '%" + fieldNombreCompania.toLowerCase() + "%' ";
        }
        
        if (!fieldCodigoPostal.isEmpty()) {
            sql += " AND LOWER(C.CODIGOPOSTAL) LIKE '%" + fieldCodigoPostal.toLowerCase() + "%' ";
        }
        
        if (listCiudades != null) {
            sql += " AND LOWER(CI.NOMBRE) = '" + listCiudades.toLowerCase() + "' ";
        }
        
        if(cargoSeleccionado != null){
            sql += " AND LOWER(G.NOMBRE) = '" + cargoSeleccionado.toLowerCase() + "' ";
        }
        
        


        // Ejecuta la consulta y actualiza la tabla
        try {
            Statement stmt = con.createStatement();
            ResultSet rs = stmt.executeQuery(sql);

            DefaultTableModel model = (DefaultTableModel) tablaBusqueda.getModel();
            if (!rs.isBeforeFirst()) {
                // No hay resultados, muestra un JOptionPane y retorna
                JOptionPane.showMessageDialog(null, "No hay resultados para tu búsqueda", "Sin resultados", JOptionPane.INFORMATION_MESSAGE);
                
            }
            else{
                model.setRowCount(0);
            
                //----------------------Configurar imagen para las columnas de detalles, eliminar y modificar ------------------------------

                URL imageEliminarURL = getClass().getResource("/recursos/eliminar.png");
                ImageIcon eliminarIcon = new ImageIcon(imageEliminarURL);
                //Ajustar tamaño de la imagen para la celda
                ImageIcon eliminarIconEscalado = new ImageIcon(eliminarIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));

                URL imageDetallesURL = getClass().getResource("/recursos/detalles.png");
                ImageIcon detallesIcon = new ImageIcon(imageDetallesURL);
                //Ajustar tamaño de la imagen para la celda
                ImageIcon detallesIconEscalado = new ImageIcon(detallesIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));

                URL imageModificarURL = getClass().getResource("/recursos/modificar.png");
                ImageIcon modificarIcon = new ImageIcon(imageModificarURL);
                //Ajustar tamaño de la imagen para la celda
                ImageIcon modificarIconEscalado = new ImageIcon(modificarIcon.getImage().getScaledInstance(23, 23, java.awt.Image.SCALE_SMOOTH));

                //--------------------------------------------------------------------------------------------------------------------------

                while (rs.next()) {
                    Object[] row = { rs.getString("NombreCompaniaCliente"), rs.getString("NombreContacto"), rs.getString("CodigoPostal"),
                            rs.getString("Cargo"), rs.getString("Ciudad"), detallesIconEscalado, eliminarIconEscalado, modificarIconEscalado};
                    model.addRow(row);
                } 
            }
            rs.close();
            stmt.close();
            
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    
    public void cargarTablaAnadirCliente() {
        // Quito el listener que uso para darle a detalles, modificar y eliminar para que no interfiera con la tabla de añadir. 
        // Además de esta manera  soluciono el problema de que se acumulen los listeners cada vez que llamo al metodo mouseListenerColumnasExtraCliente.
        tablaBusqueda.removeMouseListener(mouseClickListener);
        mouseClickListener = null;
        
        try {
            String consultaAnadir = "SELECT C.NOMCOMPANIA AS NombreCompaniaCliente, C.NOMCONTACTO AS NombreContacto, C.DIRECCION AS Direccion,"
                    + " C.CODIGOPOSTAL AS CodigoPostal, C.TELEFONO AS Telefono, G.NOMBRE AS Cargo, CI.NOMBRE AS Ciudad FROM PUBLIC.CLIENTES C "
                    + "LEFT JOIN PUBLIC.CARGOS G ON C.CODCARGO = G.CODIGO LEFT JOIN PUBLIC.CIUDADES CI ON C.CODCIUDAD = CI.CODIGO;";

            ResultSet resul = null;
            Statement stmt = null;

            stmt = con.createStatement();
            resul = stmt.executeQuery(consultaAnadir);

            ResultSetMetaData metaData = resul.getMetaData();
            int columnCount = metaData.getColumnCount();

            DefaultTableModel model = new DefaultTableModel() {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false; // Hace que todas las celdas no sean editables
                }
            };

            model.setColumnIdentifiers(new Object[]{"Compañia", "Contacto", "Dirección", "Código postal", "Teléfono", "Cargo que ocupa", "Ciudad"});

            while (resul.next()) {
                Object[] rowData = new Object[columnCount];
                for (int i = 1; i <= columnCount; i++) {
                    rowData[i - 1] = resul.getObject(i);
                }
                model.addRow(rowData);
                
            }
            tablaBusqueda.setModel(model);
            activarOrdenarColumnas(model);
            TableColumnModel columnModel = tablaBusqueda.getColumnModel();
            columnModel.getColumn(5).setPreferredWidth(150);
            columnModel.getColumn(0).setPreferredWidth(150);
            columnModel.getColumn(3).setPreferredWidth(30);
            columnModel.getColumn(2).setPreferredWidth(110);
            columnModel.getColumn(4).setPreferredWidth(50);
            

        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoApariencia = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaBusqueda = new javax.swing.JTable();
        panelAcciones = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuAcciones = new javax.swing.JMenu();
        menuPedidos = new javax.swing.JMenu();
        menuBuscarPedidos = new javax.swing.JMenuItem();
        menuAnadirPedidos = new javax.swing.JMenuItem();
        menuCliente = new javax.swing.JMenu();
        menuBuscarCliente = new javax.swing.JMenuItem();
        menuAñadirCliente = new javax.swing.JMenuItem();
        menuApariencia = new javax.swing.JMenu();
        menuDarkMode = new javax.swing.JCheckBoxMenuItem();
        menuModoClaro = new javax.swing.JCheckBoxMenuItem();
        menuModoLectura = new javax.swing.JCheckBoxMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        menuModoAzulado = new javax.swing.JCheckBoxMenuItem();
        menuModoNord = new javax.swing.JCheckBoxMenuItem();
        menuModoCyan = new javax.swing.JCheckBoxMenuItem();
        menuModoTurquesa = new javax.swing.JCheckBoxMenuItem();
        menuModoMorado = new javax.swing.JCheckBoxMenuItem();
        menuAyuda = new javax.swing.JMenu();
        menuDocumentacion = new javax.swing.JMenuItem();
        menuAcercaDe = new javax.swing.JMenuItem();
        menuExit = new javax.swing.JMenu();
        menuCerrarSesion = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        menuExitApp = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Buscar y filtrar pedidos");
        setIconImage(getIconImage());
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaBusqueda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaBusqueda.setToolTipText("");
        jScrollPane1.setViewportView(tablaBusqueda);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1110, 280));

        panelAcciones.setPreferredSize(new java.awt.Dimension(1090, 410));

        javax.swing.GroupLayout panelAccionesLayout = new javax.swing.GroupLayout(panelAcciones);
        panelAcciones.setLayout(panelAccionesLayout);
        panelAccionesLayout.setHorizontalGroup(
            panelAccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1090, Short.MAX_VALUE)
        );
        panelAccionesLayout.setVerticalGroup(
            panelAccionesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 410, Short.MAX_VALUE)
        );

        getContentPane().add(panelAcciones, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, 1090, 410));

        menuAcciones.setText("Acciones");

        menuPedidos.setText("Pedidos");

        menuBuscarPedidos.setText("Buscar/filtrar");
        menuBuscarPedidos.setToolTipText("");
        menuBuscarPedidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBuscarPedidosActionPerformed(evt);
            }
        });
        menuPedidos.add(menuBuscarPedidos);

        menuAnadirPedidos.setText("Añadir");
        menuAnadirPedidos.setToolTipText("");
        menuAnadirPedidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAnadirPedidosActionPerformed(evt);
            }
        });
        menuPedidos.add(menuAnadirPedidos);

        menuAcciones.add(menuPedidos);

        menuCliente.setText("Clientes");

        menuBuscarCliente.setText("Buscar/filtrar");
        menuBuscarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBuscarClienteActionPerformed(evt);
            }
        });
        menuCliente.add(menuBuscarCliente);

        menuAñadirCliente.setText("Añadir");
        menuAñadirCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAñadirClienteActionPerformed(evt);
            }
        });
        menuCliente.add(menuAñadirCliente);

        menuAcciones.add(menuCliente);

        jMenuBar1.add(menuAcciones);

        menuApariencia.setText("Apariencia");

        grupoApariencia.add(menuDarkMode);
        menuDarkMode.setText("Modo oscuro");
        menuDarkMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDarkModeActionPerformed(evt);
            }
        });
        menuApariencia.add(menuDarkMode);

        grupoApariencia.add(menuModoClaro);
        menuModoClaro.setText("Modo claro");
        menuModoClaro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuModoClaroActionPerformed(evt);
            }
        });
        menuApariencia.add(menuModoClaro);

        grupoApariencia.add(menuModoLectura);
        menuModoLectura.setText("Modo lectura");
        menuModoLectura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuModoLecturaActionPerformed(evt);
            }
        });
        menuApariencia.add(menuModoLectura);
        menuApariencia.add(jSeparator2);

        grupoApariencia.add(menuModoAzulado);
        menuModoAzulado.setText("Azul");
        menuModoAzulado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuModoAzuladoActionPerformed(evt);
            }
        });
        menuApariencia.add(menuModoAzulado);

        grupoApariencia.add(menuModoNord);
        menuModoNord.setSelected(true);
        menuModoNord.setText("Nord");
        menuModoNord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuModoNordActionPerformed(evt);
            }
        });
        menuApariencia.add(menuModoNord);

        grupoApariencia.add(menuModoCyan);
        menuModoCyan.setText("Cyan claro");
        menuModoCyan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuModoCyanActionPerformed(evt);
            }
        });
        menuApariencia.add(menuModoCyan);

        grupoApariencia.add(menuModoTurquesa);
        menuModoTurquesa.setText("Turquesa");
        menuModoTurquesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuModoTurquesaActionPerformed(evt);
            }
        });
        menuApariencia.add(menuModoTurquesa);

        grupoApariencia.add(menuModoMorado);
        menuModoMorado.setText("Morado Oscuro");
        menuModoMorado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuModoMoradoActionPerformed(evt);
            }
        });
        menuApariencia.add(menuModoMorado);

        jMenuBar1.add(menuApariencia);

        menuAyuda.setText("Ayuda");
        menuAyuda.setToolTipText("");

        menuDocumentacion.setText("Documentación");
        menuDocumentacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuDocumentacionActionPerformed(evt);
            }
        });
        menuAyuda.add(menuDocumentacion);

        menuAcercaDe.setText("Acerca de");
        menuAcercaDe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuAcercaDeActionPerformed(evt);
            }
        });
        menuAyuda.add(menuAcercaDe);

        jMenuBar1.add(menuAyuda);

        menuExit.setText("Salir");

        menuCerrarSesion.setText("Cerrar sesión");
        menuCerrarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuCerrarSesionActionPerformed(evt);
            }
        });
        menuExit.add(menuCerrarSesion);
        menuExit.add(jSeparator1);

        menuExitApp.setText("Salir de la aplicación");
        menuExitApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitAppActionPerformed(evt);
            }
        });
        menuExit.add(menuExitApp);

        jMenuBar1.add(menuExit);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void menuExitAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitAppActionPerformed
        
        int opcion = JOptionPane.showConfirmDialog(null, "¿Seguro que quieres salir de la aplicacion?", "Confirmar salida", JOptionPane.YES_NO_OPTION);
        
        if (opcion == JOptionPane.YES_OPTION) {
            //Cerrar la conexión
            try {
                con.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
            // Cerrar aplicación
            System.exit(0);
        }
        
    }//GEN-LAST:event_menuExitAppActionPerformed

    private void menuAcercaDeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAcercaDeActionPerformed
        
        VentanaAcercaDe vad = new VentanaAcercaDe(this,false);
        vad.setVisible(true);
    }//GEN-LAST:event_menuAcercaDeActionPerformed

    private void menuBuscarPedidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBuscarPedidosActionPerformed
        this.setTitle("Buscar y filtrar pedidos");
        tablaBusqueda.removeMouseListener(mouseClickListener);
        mouseClickListener = null;
        //Borra lo que hay en el panel y añade el Panel de buscar
        panelAcciones.removeAll();
        cargarTablaBuscar();
        PanelBuscarPedido pb = new PanelBuscarPedido(this);
        panelAcciones.setLayout(new BorderLayout());
        panelAcciones.add(pb, BorderLayout.CENTER);
        panelAcciones.add(pb);
        panelAcciones.revalidate();
        panelAcciones.repaint();
        
    }//GEN-LAST:event_menuBuscarPedidosActionPerformed

    private void menuAnadirPedidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAnadirPedidosActionPerformed
       this.setTitle("Añadir pedidos");
       tablaBusqueda.removeMouseListener(mouseClickListener);
        mouseClickListener = null;
        //Borra lo que hay en el panel y añade el Panel de añadir
        panelAcciones.removeAll();
        cargarTablaAnadir();
        PanelAnadirPedido pa = new PanelAnadirPedido(this);
        panelAcciones.setLayout(new BorderLayout());
        panelAcciones.add(pa, BorderLayout.CENTER);
        panelAcciones.add(pa);
        panelAcciones.revalidate();
        panelAcciones.repaint();
    }//GEN-LAST:event_menuAnadirPedidosActionPerformed

    private void menuBuscarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBuscarClienteActionPerformed
        this.setTitle("Buscar y filtrar clientes");
        panelAcciones.removeAll();
        cargarTablaBuscarClientes();
        PanelBuscarCliente pb = new PanelBuscarCliente(this);
        panelAcciones.setLayout(new BorderLayout());
        panelAcciones.add(pb, BorderLayout.CENTER);
        panelAcciones.add(pb);
        panelAcciones.revalidate();
        panelAcciones.repaint();
    }//GEN-LAST:event_menuBuscarClienteActionPerformed

    private void menuAñadirClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuAñadirClienteActionPerformed
        this.setTitle("Añadir clientes");
        panelAcciones.removeAll();
        cargarTablaAnadirCliente();
        PanelAnadirCliente pa = new PanelAnadirCliente(this);
        panelAcciones.setLayout(new BorderLayout());
        panelAcciones.add(pa, BorderLayout.CENTER);
        panelAcciones.add(pa);
        panelAcciones.revalidate();
        panelAcciones.repaint();
    }//GEN-LAST:event_menuAñadirClienteActionPerformed

    private void menuDocumentacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDocumentacionActionPerformed
        try {
            // Obtén la URL del recurso dentro del proyecto
             String rutaPDF = "src/recursos/Documentacion.pdf";

            // Crea un objeto File con la ruta del PDF
            File archivoPDF = new File(rutaPDF);

            // Verifica si Desktop es compatible y el archivo existe
            if (Desktop.isDesktopSupported()) {
                // Abre el archivo con la aplicación predeterminada asociada a archivos PDF
                Desktop.getDesktop().open(archivoPDF);
            } else {
                JOptionPane.showMessageDialog( null, "No se ha podido abrir el archivo", "Error",JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_menuDocumentacionActionPerformed

    private void menuCerrarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuCerrarSesionActionPerformed
        int opcion = JOptionPane.showConfirmDialog(null, "¿Seguro que quieres cerrar sesión?", "Confirmar", JOptionPane.YES_NO_OPTION);
        
        if (opcion == JOptionPane.YES_OPTION) {
           dispose();
           Login vs = new Login();
           vs.setVisible(true);
        }
    }//GEN-LAST:event_menuCerrarSesionActionPerformed

    private void menuDarkModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuDarkModeActionPerformed
             EventQueue.invokeLater(new Runnable(){
                @Override
                public void run(){
                    FlatDarculaLaf.setup();
                    FlatLaf.updateUI();
            }
            });
      
    }//GEN-LAST:event_menuDarkModeActionPerformed

    private void menuModoClaroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuModoClaroActionPerformed
        EventQueue.invokeLater(new Runnable(){
                @Override
                public void run(){
                    FlatIntelliJLaf.setup();
                    FlatLaf.updateUI();
            }
            });
    }//GEN-LAST:event_menuModoClaroActionPerformed

    private void menuModoMoradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuModoMoradoActionPerformed
        EventQueue.invokeLater(new Runnable(){
                @Override
                public void run(){
                    FlatDarkPurpleIJTheme.setup();
                    FlatLaf.updateUI();
            }
            });
    }//GEN-LAST:event_menuModoMoradoActionPerformed

    private void menuModoTurquesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuModoTurquesaActionPerformed
       EventQueue.invokeLater(new Runnable(){
                @Override
                public void run(){
                    FlatSolarizedDarkIJTheme.setup();
                    FlatLaf.updateUI();
            }
            });
    }//GEN-LAST:event_menuModoTurquesaActionPerformed

    private void menuModoLecturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuModoLecturaActionPerformed
        EventQueue.invokeLater(new Runnable(){
                @Override
                public void run(){
                    FlatSolarizedLightIJTheme.setup();
                    FlatLaf.updateUI();
            }
            });
    }//GEN-LAST:event_menuModoLecturaActionPerformed

    private void menuModoAzuladoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuModoAzuladoActionPerformed
        EventQueue.invokeLater(new Runnable(){
                @Override
                public void run(){
                    FlatGradiantoDeepOceanIJTheme.setup();
                    FlatLaf.updateUI();
            }
            });
    }//GEN-LAST:event_menuModoAzuladoActionPerformed

    private void menuModoNordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuModoNordActionPerformed
        EventQueue.invokeLater(new Runnable(){
                @Override
                public void run(){
                    FlatNordIJTheme.setup();
                    FlatLaf.updateUI();
            }
            });
    }//GEN-LAST:event_menuModoNordActionPerformed

    private void menuModoCyanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuModoCyanActionPerformed
        EventQueue.invokeLater(new Runnable(){
                @Override
                public void run(){
                    FlatCyanLightIJTheme.setup();
                    FlatLaf.updateUI();
            }
            });
    }//GEN-LAST:event_menuModoCyanActionPerformed
    
    
     public static void setUIFont(FontUIResource f) {
        Enumeration<Object> keys = UIManager.getDefaults().keys();
        while (keys.hasMoreElements()) {
            Object key = keys.nextElement();
            Object value = UIManager.get(key);
            if (value instanceof FontUIResource) {
                UIManager.put(key, f);
            }
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       
        
         
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup grupoApariencia;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenu menuAcciones;
    private javax.swing.JMenuItem menuAcercaDe;
    private javax.swing.JMenuItem menuAnadirPedidos;
    private javax.swing.JMenu menuApariencia;
    private javax.swing.JMenu menuAyuda;
    private javax.swing.JMenuItem menuAñadirCliente;
    private javax.swing.JMenuItem menuBuscarCliente;
    private javax.swing.JMenuItem menuBuscarPedidos;
    private javax.swing.JMenuItem menuCerrarSesion;
    private javax.swing.JMenu menuCliente;
    private javax.swing.JCheckBoxMenuItem menuDarkMode;
    private javax.swing.JMenuItem menuDocumentacion;
    private javax.swing.JMenu menuExit;
    private javax.swing.JMenuItem menuExitApp;
    private javax.swing.JCheckBoxMenuItem menuModoAzulado;
    private javax.swing.JCheckBoxMenuItem menuModoClaro;
    private javax.swing.JCheckBoxMenuItem menuModoCyan;
    private javax.swing.JCheckBoxMenuItem menuModoLectura;
    private javax.swing.JCheckBoxMenuItem menuModoMorado;
    private javax.swing.JCheckBoxMenuItem menuModoNord;
    private javax.swing.JCheckBoxMenuItem menuModoTurquesa;
    private javax.swing.JMenu menuPedidos;
    private javax.swing.JPanel panelAcciones;
    private javax.swing.JTable tablaBusqueda;
    // End of variables declaration//GEN-END:variables
}
